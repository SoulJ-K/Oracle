-- 70년대 생(1970~1979) 중 여자이면서 전씨인 사원의 이름과, 주민번호, 부서명, 직급 조회
SELECT EMP_NAME 이름, EMP_NO 주민번호, DEPT_TITLE 부서명, JOB_NAME 직급명
FROM employee E, JOB J, department D
WHERE e.job_code = j.job_code AND E.DEPT_CODE = D. DEPT_ID 
        AND SUBSTR(EMP_NO, 1,2) >=70 AND SUBSTR(EMP_NO , 1,2)<= 79 
        AND SUBSTR(EMP_NO, 8,1) = 2 AND EMP_NAME LIKE '전%';

-- 가장 막내의 사원 코드, 사원 명, 나이, 부서 명, 직급 명 조회
--가장 막내
SELECT MIN(EXTRACT(YEAR FROM SYSDATE)- EXTRACT(YEAR FROM (TO_DATE(SUBSTR(EMP_NO,1,2),'RR')))+1)
FROM EMPLOYEE;

SELECT EMP_ID, EMP_NAME, EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM (TO_DATE(SUBSTR(EMP_NO,1,2),'RR')))+1 나이, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE E 
    JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    JOIN JOB USING(JOB_CODE)
WHERE EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM (TO_DATE(SUBSTR(EMP_NO,1,2),'RR')))+1 = (SELECT MIN(EXTRACT(YEAR FROM SYSDATE)- EXTRACT(YEAR FROM (TO_DATE(SUBSTR(EMP_NO,1,2),'RR')))+1)
FROM EMPLOYEE);

-- 이름에 ‘형’이 들어가는 사원의 사원 코드, 사원 명, 직급 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE JOIN JOB USING (JOB_CODE)
WHERE EMP_NAME LIKE '%형%';

-- 부서 코드가 D5이거나 D6인 사원의 사원 명, 직급, 부서 코드, 부서 명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE E, JOB J, DEPARTMENT D
WHERE E.JOB_CODE = j.job_code AND DEPT_CODE = DEPT_ID AND DEPT_CODE IN ('D5', 'D9');

-- 보너스를 받는 사원의 사원 명, 보너스, 부서 명, 지역 명 조회
SELECT EMP_NAME, BONUS, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
WHERE BONUS IS NOT NULL;

-- 사원 명, 직급, 부서 명, 지역 명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM employee E, JOB J, department D, location L
WHERE E.JOB_CODE = j.job_code AND DEPT_CODE = DEPT_ID AND LOCATION_ID = LOCAL_CODE;

-- 한국이나 일본에서 근무 중인 사원의 사원 명, 부서 명, 지역 명, 국가 명 조회
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM employee
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION  ON  (LOCATION_ID = LOCAL_CODE)
JOIN national USING (NATIONAL_CODE)
WHERE NATIONAL_NAME IN ('한국', '일본');

-- 한 사원과 같은 부서에서 일하는 사원의 이름 조회
SELECT E. EMP_NAME, E.DEPT_CODE, D.EMP_NAME
FROM employee E
JOIN employee D ON (E.DEPT_CODE = D.DEPT_CODE)
WHERE E.EMP_NAME != D.EMP_NAME
ORDER BY 1;

-- 보너스가 없고 직급 코드가 J4이거나 J7인 사원의 이름, 직급, 급여 조회 (NVL 이용)
SELECT EMP_NAME, JOB_NAME, SALARY
FROM employee
 JOIN job USING (JOB_CODE)
WHERE JOB_CODE IN ('J4', 'J7') AND NVL(BONUS, 0) =0;

-- 직원 테이블에서 보너스 포함한 연봉이 높은 5명의
-- 사번, 이름, 부서명, 직급명, 입사일을 조회하세요
SELECT EMP_ID,EMP_NAME, salary*(1+NVL(BONUS,0))*12
FROM employee
--WHERE ROWNUM <= 5
ORDER BY salary*(1+NVL(BONUS,0))*12 DESC;

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE
FROM (SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE,  salary*(1+NVL(BONUS,0))*12
        FROM employee
        JOIN JOB USING (JOB_CODE)
        JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
        ORDER BY salary*(1+NVL(BONUS,0))*12 DESC)
        WHERE ROWNUM <= 5;

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE
FROM (SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE,  salary*(1+NVL(BONUS,0))*12, 
            RANK() OVER (ORDER BY salary*(1+NVL(BONUS,0))*12 DESC) 순위
        FROM employee
        JOIN JOB USING (JOB_CODE)
        JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID))        
        WHERE 순위 <= 5;

-- 부서별 급여 합계가 전체 급여 총 합의 20%보다 많은 부서의 부서명과, 부서별 급여 합계 조회
-- 1) having 사용
--부서별 급여 합계
SELECT DEPT_TITLE, SUM(SALARY)
FROM department JOIN employee ON (DEPT_ID = DEPT_CODE)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) > (SELECT SUM(SALARY) *0.2 FROM employee);

-- 2) 인라인 뷰 사용
SELECT DEPT_TITLE, S
FROM (SELECT DEPT_TITLE, SUM(SALARY) S
        FROM department 
        JOIN employee ON (DEPT_ID = DEPT_CODE)
        GROUP BY DEPT_TITLE)
WHERE S >(SELECT SUM(SALARY)*0.2 FROM EMPLOYEE);

-- 3) WITH 사용
WITH TH AS (SELECT DEPT_TITLE, SUM(SALARY) S
        FROM department 
        JOIN employee ON (DEPT_ID = DEPT_CODE)
        GROUP BY DEPT_TITLE)
    
SELECT DEPT_TITLE, S
FROM TH
WHERE S > (SELECT SUM(SALARY)*0.2 FROM EMPLOYEE);