--JOIN : 하나 이상의 테이블에서 데이터를 조회하기 위해 사용

--사번, 사원명, 부서코드, 부서명 조회
SELECT EMP_ID, EMP_NAME, DEPT_CODE
FROM EMPLOYEE;

SELECT DEPT_ID, DEPT_TITLE
FROM DEPARTMENT;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE=DEPT_ID;     --이너조인(내부조인), 오라클 구문 : 가지고 있는 값이 NULL이면 제외되어 합쳐짐

SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
    JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID);
    
SELECT EMP_ID, EMP_NAME, EMPLOYEE.JOB_CODE, JOB_NAME
FROM EMPLOYEE, JOB
WHERE EMPLOYEE.JOB_CODE = JOB.JOB_CODE;

SELECT EMP_ID, EMP_NAME, E.JOB_CODE, JOB_NAME
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE;   --오라클 구문

SELECT EMP_ID, EMP_NAME, JOB_CODE, JOB_NAME
FROM EMPLOYEE
    JOIN JOB USING (JOB_CODE);    --ANSI 표준구문
    
--부서명과 해당 부서의 지역 명 조회(DEPT_TITLE, LOCAL_NAME)
--오라클
SELECT DEPT_TITLE, LOCAL_NAME
FROM DEPARTMENT , LOCATION 
WHERE LOCATION_ID=local_code;

--ANSI
SELECT DEPT_TITLE, LOCAL_NAME
FROM DEPARTMENT
    JOIN LOCATION ON(LOCATION_ID=LOCAL_CODE);

--외부조인(OUTER JOIN) : 불러오는 값이 NULL이어도 포함되고 반드시 OUTER JOIN 명시
--두 테이블의 지정하는 컬럼 값이 일치하지 않는 행도 조인에 포함

--LEFT[OUTER] JOIN : 왼쪽에 적힌 테이블의 컬럼 수를 기준으로 조인
--ANSI
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
     LEFT   JOIN DEPARTMENT ON(DEPT_CODE=DEPT_ID);
     
--ORACLE : 맞춰주는 쪽(기준이 되지 않는 쪽)에 +를 붙임
SELECT EMP_NAME, DEPT_TITLE
FROM employee, DEPARTMENT
WHERE  DEPT_CODE = DEPT_ID(+);    --DEPT_ID(+) : 내가 너한테 맞춰줄게.

--RIGHT [OUTER] JOIN : 오른쪽에 적힌 테이블의 컬럼 수를 기준으로 조인
--ANSI
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
    RIGHT JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID);
    
--ORACLE
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE(+) = DEPT_ID;

--FULL [OUTER] JOIN : 합치기에 사용한 두 테이블이 가진 모든 행을 결과에 포함
--ANSI
SELECT EMP_NAME, DEPT_TITLE
FROM employee
    FULL JOIN department ON(DEPT_CODE = DEPT_ID);

--ORACLE : FULL은 ORACLE에서 사용할 수 없음
--SELECT EMP_NAME, DEPT_TITLE
--FROM employee, department
--WHERE DEPT_CODE(+) = DEPT_ID(+);

--CROSS JOIN
SELECT EMP_NAME
FROM employee;

SELECT DEPT_TITLE
FROM DEPARTMENT;
   
SELECT EMP_NAME, DEPT_TITLE 
FROM EMPLOYEE 
CROSS JOIN DEPARTMENT;

--비등가 조인(NON EQUAL JOIN)
--'='(등호)를 사용하지 않는 조인문
--지정한 컬럼 값이 일치하는 경우가 아닌 값의 범위에 포함되는 행들을 연결하는 방식
SELECT EMP_NAME, SALARY, E.SAL_LEVEL
FROM EMPLOYEE E
JOIN SAL_GRADE ON (SALARY BETWEEN MIN_SAL AND MAX_SAL);

--SELF JOIN == 자체조인
--같은 테이블 조인(자기 자신과 조인)

--오라클 구문
SELECT E.EMP_ID 사원번호, E.EMP_NAME 사원이름, E.DEPT_CODE 사원부서, E.MANAGER_ID 관리자번호, M.EMP_NAME 관리자이름
FROM EMPLOYEE E, EMPLOYEE M
WHERE M.EMP_ID = E.MANAGER_ID;

--ANSI 구문
SELECT E.EMP_ID, E.EMP_NAME, E.DEPT_CODE, E.MANAGER_ID, M.EMP_NAME
FROM EMPLOYEE E
JOIN EMPLOYEE M ON(E.MANAGER_ID = M.EMP_ID);

--다중 조인 : N개의 테이블을 조회할 때 사용
--사번, 사원 명, 부서 코드, 부서 명, 지역 명(LOCAL_NAME) 조회

--ORACLE
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE E, DEPARTMENT D, LOCATION L
WHERE DEPT_CODE = DEPT_ID
        AND LOCATION_ID = LOCAL_CODE;
        
--ANSI : JOIN 되는 순서가 중요
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN LOCATION ON(LOCATION_ID = LOCAL_CODE)
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID);

--직급이 대리면서 아시아지역에 근무하는 직원 조회
--사번, 이름, 직급명, 부서명, 근무지역명, 급여

--오라클
SELECT EMP_ID, EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME, SALARY
FROM employee E, DEPARTMENT, LOCATION, JOB J
WHERE DEPT_CODE = DEPT_ID
        AND LOCATION_ID = LOCAL_CODE 
        AND E.JOB_CODE = J.JOB_CODE 
        AND LOCAL_NAME LIKE 'ASIA%' 
        AND E.JOB_CODE = 'J6';

--ANSI
SELECT EMP_ID, EMP_NAME, JOB_NAME, LOCAL_NAME, SALARY
FROM employee 
JOIN JOB USING(JOB_CODE)
JOIN DEPARTMENT ON(DEPT_ID = DEPT_CODE)
JOIN LOCATION ON(LOCATION_ID = LOCAL_CODE)
WHERE LOCAL_NAME LIKE 'ASIA%' AND JOB_CODE = 'J6';

